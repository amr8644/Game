const float time_step = 0.01f;
    float accmulator = 0.0f;
    float current_time = SDL_GetTicks();

    while ( running )
    {
        int start_tick = SDL_GetTicks();

        float new_time = SDL_GetTicks();
        float frame_time = new_time - current_time;
        
        current_time = new_time;

        accmulator += frame_time;
        while (accmulator >= time_step)
        {
            while ( SDL_PollEvent( &event ) )
            {
                if ( event.type == SDL_QUIT )
                {
                    running = false;
                    break;
                }               
            }
            accmulator -= time_step;  
        }
         
         const float alpha  = accmulator / time_step;

        //Clear screen
        SDL_RenderClear( renderer );  

        //Apply the PNG image
		SDL_BlitSurface( gPNGSurface, NULL, screenSurface, NULL );
			
		//Update the surface
		SDL_UpdateWindowSurface( window );

        int frame_ticks = SDL_GetTicks() - start_tick;

        if ( frame_ticks < 1000 / get_refresh_rate() )
           SDL_Delay( 1000 / window_refresh_rate - frame_ticks );
    }


// SDL_Surface* load_surface( const char* path )
// {
//     //The final texture
//     //The final optimized image
// 	SDL_Surface* optimizedSurface = NULL;

// 	//Load image at specified path
// 	SDL_Surface* loadedSurface = IMG_Load( path );
// 	if( loadedSurface == NULL )
// 	{
// 		printf( "Unable to load image %s! SDL_image Error: %s\n", path, IMG_GetError() );
// 	}
// 	else
// 	{
// 		//Convert surface to screen format
// 		optimizedSurface = SDL_ConvertSurface( loadedSurface, screenSurface->format, 0 );
// 		if( optimizedSurface == NULL )
// 		{
// 			printf( "Unable to optimize image %s! SDL Error: %s\n", path, SDL_GetError() );
// 		}

// 		//Get rid of old loaded surface
// 		SDL_FreeSurface( loadedSurface );
// 	}

// 	return optimizedSurface;
// }
